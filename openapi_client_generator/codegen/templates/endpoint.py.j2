from typing import NamedTuple, Callable

from {{ package_name }}.common import http, types


__all__ = (
    'call',
    {% if path_params_type %}'PathParams',{% endif -%}
    {% if query_params_type %}'QueryParams',{% endif -%}
    {% if request_type %}'Request',{% endif -%}
    {% if response_type %}'Response',{% endif -%}
)


{{ path_params_type }}

{{ query_params_type }}

{{ request_type }}

{{ response_type }}

{{ headers_type }}

METHOD = http.Method(__name__.split('.')[-1])
URL = "{{ endpoint_url }}"

{% if request_type %}
parse_request, serialize_request = types.generate_constructor_and_serializer(Request)
{% endif %}

{% if response_type %}
parse_response, serialize_response = types.generate_constructor_and_serializer(Response)
{% endif %}

def call(
    client: http.Client,
    {% if request_type %}request: Request,{% endif %}
    {% if headers_type %}headers: Headers = Headers(),{% endif %}
) -> {% if response_type %}Response{% else %}None{% endif %}:
    url = '/'.join([client.service_url.rstrip('/'), URL.lstrip('/')])
    response = client.make_call(
        method=METHOD, url=url,
        {% if headers_type %}headers=headers._asdict(){% endif %}
    )
    return None
